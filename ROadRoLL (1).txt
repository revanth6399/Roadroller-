
#include<windows.h>
#include<stdio.h>
#include<GL/glut.h>
#include<math.h>
#define PI 3.1415927

float ang=0.0;
float angStep=0.3;
float mov=2.0;
float movStep=0.0005;
int frontCleared=0;
int rev=0;
int lightOn=1;

float universalScale=0.6;



float x=0.0f,z=5.0f;

GLfloat ambientCube[]={1.0,1.0,0.0,0.0};
    GLfloat diffuseCube[]={1.0,1.0,0.0,0.0};
    GLfloat specularCube[]={1.0,0.0,0.0,1.0};
    GLfloat shineCube[]={10.0};
    GLfloat intensityCube[]={1.0,1.0,1.0,1.0};

 GLfloat pos1[]={10.0,5.0,-1.0,0.0};
 void stripPieces(int,int,int,int);
 void roadPieces(int,int,int,int);

void front();
void menu();



void draw_cylinder(GLfloat radius,GLfloat height,GLfloat R,GLfloat G,GLfloat B){
    GLfloat x              = 0.0;
    GLfloat y              = 0.0;
    GLfloat angle          = 0.0;
    GLfloat angle_stepsize = 0.1;
glDisable(GL_LIGHTING);
    /** Draw the tube */

    glBegin(GL_QUAD_STRIP);
    angle = 0.0;
        while( angle < 2*PI ) {
            x = radius * cos(angle);
            y = radius * sin(angle);
            glColor3f(G+x,R+y,B);
            glVertex3f(x, y , height);
            glVertex3f(x, y , 0.0);
            angle = angle + angle_stepsize;
        }
        glVertex3f(radius, 0.0, height);
        glVertex3f(radius, 0.0, 0.0);
    glEnd();

    /** Draw the circle on top of cylinder */


    glBegin(GL_POLYGON);
    angle = 0.0;
        while( angle < 2*PI )
        {
            x = radius * cos(angle);
            y = radius * sin(angle);
            glColor3f(0.2409,0.0,0.0);
            glVertex3f(x, y , height);
            angle = angle + angle_stepsize;
        }
        glVertex3f(radius, 0.0, height);
    glEnd();


      glBegin(GL_POLYGON);
    angle = 0.0;
        while( angle < 2*PI ) {
            x = radius * cos(angle);
            y = radius * sin(angle);
            glColor3f(0.2409,0.0,0.0);
          //   lightingWheel();
            glVertex3f(x, y , 0);
            angle = angle + angle_stepsize;
        }
        glVertex3f(radius, 0.0, height);
    glEnd();
}

GLfloat vertex[][3]={{-5.5,-1.4,-1.0},{1.0,-1.4,-1.0},{1.0,2.5,-1.0},{-5.5,1.0,-1.0},{-3.0,-1.4,1.0},{1.0,-1.4,1.0},{1.0,2.5,1.0},{-5.5,1.0,1.0}};
GLfloat normal[][3]={{-1.0,-1,-1},{1,-1.0,-1.0},{1.0,1.0,-1.0},{-1.0,1.0,-1.0},{-1.0,-1.0,1.0},{1.0,-1.0,1.0},{1.0,1.0,1.0},{-1.0,1.0,1.0}};
GLfloat color[][3]={{0.772549,0.662745,0.48},{0.28627,0,0},{0.28627,0,0},{0.28627,0,0},{0.28627,0,0},{0.28627,0,0},{0.28627,0,0},{0.28627,0,0}};


GLfloat vertexStrip[][3]={{-0.5,-1.0,-1.0},{0.5,-1.0,-1.0},{0.5,1.0,-1.0},{-0.5,1.0,-1.0},{-0.5,-1.0,1.0},{0.5,-1.0,1.0},{0.5,1.0,1.0},{-0.5,1.0,1.0}};

GLfloat roadStrip[][3]={{-0.5,-1.0,-1.0},{0.5,-1.0,-1.0},{0.5,1.0,-1.0},{-0.5,1.0,-1.0},{-0.5,-1.0,1.0},{0.5,-1.0,1.0},{0.5,1.0,1.0},{-0.5,1.0,1.0}};

static GLdouble viewer[]={8.0,0.0,5.0};
void polygon(int a,int b,int c,int d)
{
	glBegin(GL_POLYGON);
	glColor3fv(color[0]);
	glNormal3fv(normal[a]);
	glVertex3fv(vertex[a]);
	glColor3fv(color[0]);
	glNormal3fv(normal[b]);
	glVertex3fv(vertex[b]);
	glColor3fv(color[0]);
	glNormal3fv(normal[c]);
	glVertex3fv(vertex[c]);
	glColor3fv(color[0]);
	glNormal3fv(normal[d]);
	glVertex3fv(vertex[d]);
	glEnd();
}
void colorCube()
{
	polygon(0,3,2,1);
	polygon(2,3,7,6);
	polygon(0,4,7,3);
	polygon(1,2,6,5);
	polygon(4,5,6,7);
	polygon(0,1,5,4);
}


void strips()
{
    glColor3f(1.0,0.0,0.0);
    stripPieces(0,3,2,1);
    glColor3f(0.0,1.0,0.0);
    stripPieces(2,3,7,6);
    glColor3f(0.0,0.0,1.0);
    stripPieces(0,4,7,3);
    glColor3f(1.0,1.0,0.0);
    stripPieces(1,2,6,5);
    glColor3f(0.0,1.0,1.0);
    stripPieces(4,5,6,7);
    glColor3f(1.0,0.0,1.0);
    stripPieces(0,1,5,4);
}
void roads()
{
    roadPieces(0,3,2,1);
    roadPieces(2,3,7,6);
    roadPieces(0,4,7,3);
    roadPieces(1,2,6,5);
   roadPieces(4,5,6,7);
    roadPieces(0,1,5,4);
}

void stripPieces(int a,int b,int c,int d)
{
    glBegin(GL_POLYGON);
	glVertex3fv(vertexStrip[a]);
	glVertex3fv(vertexStrip[b]);
	glVertex3fv(vertexStrip[c]);
	glVertex3fv(vertexStrip[d]);
	glEnd();

}
void roadPieces(int a,int b,int c,int d)
{
    glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,0.0);
	glVertex3fv(roadStrip[a]);
    glColor3f(0.0,0.0,0.0);
	glVertex3fv(roadStrip[b]);
    glColor3f(0.0,0.0,0.0);
	glVertex3fv(roadStrip[c]);
    glColor3f(0.0,0.0,0.0);
	glVertex3fv(roadStrip[d]);
	glEnd();

}


void lightingCube()
{

    glMaterialfv(GL_FRONT,GL_AMBIENT,ambientCube);
    glMaterialfv(GL_FRONT,GL_DIFFUSE,diffuseCube);
    glMaterialfv(GL_FRONT,GL_SPECULAR,specularCube);
    glLightfv(GL_LIGHT0,GL_POSITION,pos1);
    glLightfv(GL_LIGHT0,GL_DIFFUSE,intensityCube);

}

void display()
{

     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
     glLoadIdentity();
     if(frontCleared==0)
        front();
    else
    {
    gluLookAt(0.0+x,0.0,0.0+z,
           0,0,0,
           0,1,0);


    glScalef(universalScale,universalScale,universalScale);
    glPushMatrix();
    glTranslatef(0.0,-6.5,0.0);
    glScalef(15.0,5.0,10.0);
    roads();
    glPopMatrix();
    glTranslatef(mov,0.0,0.0);
    glPushMatrix();         //front cyl connector1
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(1.0,-0.4,1.19);
        glRotatef(15,0.0,1.0,0.0);
        glScalef(0.1,0.7,0.02);
        lightingCube();
        strips();
    glPopMatrix();
    glPushMatrix();         //front connector1 connector to body
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(1.0,0.35,1.10);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(90,1.0,0.0,0.0);
        glScalef(0.1,0.15,0.05);
        lightingCube();
        strips();
    glPopMatrix();
    glPushMatrix();         //front cyl connector 2
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(0.5,-0.4,-0.29);
        glRotatef(15,0.0,1.0,0.0);
        glScalef(0.1,0.7,0.02);
        lightingCube();
        strips();
    glPopMatrix();
    glPushMatrix();         //connector2 connector to body
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(0.5,0.30,-0.10);
        glScalef(0.1,0.03,0.2);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(90,1.0,0.0,0.0);
        lightingCube();
        strips();
    glPopMatrix();
    glPushMatrix();         //shelter piller 1
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(3.5,2.0,0.4);
        glScalef(0.1,0.8,0.05);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(90,0.0,0.0,1.0);
        lightingCube();
        strips();
    glPopMatrix();

    glPushMatrix();         //shelter piller 2
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(3.0,2.0,-0.5);
        glScalef(0.1,0.8,0.05);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(90,0.0,0.0,1.0);
        lightingCube();
        strips();
    glPopMatrix();

    glPushMatrix();      //shelter
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(2.8,2.3,-0.0);
        glScalef(0.6,0.2,0.5);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(90,0.0,0.0,1.0);
        lightingCube();
        strips();
    glPopMatrix();

    glPushMatrix();
        if(lightOn)
            glEnable(GL_LIGHTING);
        else
            glDisable(GL_LIGHTING);
        glTranslatef(3.0,0.5,0.0);
        glRotatef(15,0.0,1.0,0.0);
        glScalef(0.5,0.5,0.5);
        lightingCube();
        colorCube();
    glPopMatrix();

    glPushMatrix();         //front cylinder
        glTranslatef(0.5,-1.0,-0.25);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(ang,0.0,0.0,1.0);
        draw_cylinder(0.48, 1.5,0.09411,0.70588,0.470588);
    glPopMatrix();

    glPushMatrix();     //back cyl 1
        glTranslatef(3.0,-0.48,0.7);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(ang,0.0,0.0,1.0);
        draw_cylinder(1.0, 0.3, 0.09411,0.70588,0.470588);
    glPopMatrix();

    glPushMatrix();//back cyl 2
        glTranslatef(3.0,-0.48,-1.0);
        glRotatef(15,0.0,1.0,0.0);
        glRotatef(ang,0.0,0.0,1.0);
        draw_cylinder(1.0, 0.3, 0, 0, 0);
    glPopMatrix();
    }

    glutSwapBuffers();


}


void idle()
{
     mov-=movStep;
      ang+=angStep;
    if(mov<-5.0)
        mov=2.0;
    glutPostRedisplay();
}

void keyboard(unsigned char key, int x1, int y1)
{
 switch (key) {
        case 'a' :
            if(x>=-5.0 && z<=5.0){
                x=x-0.5;
                z=5.0-fabs(x);
            }
         glutPostRedisplay();
			break;
		case 'd':
		    if(x<=5.0 && z<=5.0)
            {
                x=x+0.5;
                z=5.0-fabs(x);
            }

            glutPostRedisplay();
			break;
    }
}

void reshape(int w,int h)
{
    glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<h)
		glOrtho(-2.0,2.0,-2.0*(GLfloat)h/(GLfloat)w,2.0*(GLfloat)h/(GLfloat)w,-50,50.0);
	else
		glOrtho(-2.0*(GLfloat)w/(GLfloat)h,2.0*(GLfloat)w/(GLfloat)h,-2.0,2.0,-50.0,50.0);
	glMatrixMode(GL_MODELVIEW);
}

void init()
{
    glClearColor(1.0,1.0,1.0,0.0);
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHTING);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LEQUAL);
}

void draw_text(float x1,float y1,float z1,char *s)
{
    int i;
    glRasterPos3f(x1,y1,z1);
    for(i=0;s[i]!='\0';i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,s[i]);
}

void front()
{
    glClearColor(1.0,0.0,0.0,0.0);
    glColor3f(0.0,0.0,1.0);
    draw_text(-1.5,1.7,0.0,"K.S School of Engineering and Management");
    draw_text(-1.5,1.5,0.0,"       Department of Computer Science & Engineering ");
    draw_text(-1.5,1.2,0.0,"     COMPUTER GRAPHICS AND VISULIZATION ");
    draw_text(-0.5,0.5,0.0,"           Package on");
    draw_text(-0.5,0.3,0.0,"Road Roller Simulation ");
    draw_text(-2.0,0.1,0.0,"Submitted by:                                                   		                           Submitted to:");
    draw_text(-2.0,-0.1,0.0,"Revanthchowdary  (1KG16CS082)                                               	         Mr.Sandeep H");
    draw_text(-2.0,-0.3,0.0,"                                       		                                                                 Associate Professor");
    draw_text(-2.0,-0.5,0.0,"                               		                             Dept.of CSE,KSSEM");
    draw_text(-2.0,-0.9,0.0,"                          Press A and D to control the road roller views");	
}

void mouse(int btn, int state, int x, int y)
{
    if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        glutPostRedisplay();
    }
}

void main_menu(int index)
{
		switch (index)
		{
		case 2:
			movStep=0.002;
			break;

		case 3:
			movStep=0.006;
			break;
        case 4:
            movStep=0.008;
            break;
        case 5:
            angStep=0.3;
            break;
        case 6:
            angStep=0.4;
            break;
        case 7:
            angStep=0.5;
            break;
        case 8:
            universalScale=0.6;
            break;
        case 9:
            universalScale=0.7;
            break;
        case 10:
            universalScale=0.8;
            break;
        case 11:
            glClearColor(1.0,1.0,1.0,1.0);
            break;
        case 12:
            glClearColor(0.0,0.0,0.0,0.0);
            break;
        case 13:
            glClearColor(1.0,0.0,0.0,0.0);
            break;
        case 14:
            glClearColor(0.0,1.0,0.0,0.0);
            break;
        case 15:
            glClearColor(0.0,0.0,1.0,0.0);
            break;
        case 16:
            exit(0);
            break;
        case 17:
            lightOn=1;
            glutPostRedisplay();
            break;
        case 18:
            lightOn=0;
            glutPostRedisplay();
            break;
        case 100:
            menu();
            frontCleared=1;
            glClearColor(1.0,1.0,1.0,1.0);
            glutPostRedisplay();

		}
}

void menu()
{
    int primaryMenu,scaleMenu,translationMenu,rotationMenu,backgroundMenu,lightMenu;
    translationMenu=glutCreateMenu(main_menu);
        glutAddMenuEntry("1x",2);
        glutAddMenuEntry("2x",3);
        glutAddMenuEntry("3x",4);

    rotationMenu=glutCreateMenu(main_menu);
        glutAddMenuEntry("1x",5);
        glutAddMenuEntry("2x",6);
        glutAddMenuEntry("3x",7);


   scaleMenu=glutCreateMenu(main_menu);
        glutAddMenuEntry("1x",8);
        glutAddMenuEntry("2x",9);
        glutAddMenuEntry("3x",10);

    backgroundMenu=glutCreateMenu(main_menu);
        glutAddMenuEntry("White",11);
        glutAddMenuEntry("Black",12);
        glutAddMenuEntry("Red",13);
        glutAddMenuEntry("Green",14);
        glutAddMenuEntry("Blue",15);

   lightMenu=glutCreateMenu(main_menu);
        glutAddMenuEntry("On",17);
        glutAddMenuEntry("Off",18);

    primaryMenu = glutCreateMenu(main_menu);
		glutAddSubMenu("Rotation", rotationMenu);
		glutAddSubMenu("Translation",translationMenu);
		glutAddSubMenu("Scale", scaleMenu);
		glutAddSubMenu("Background", backgroundMenu);
		glutAddSubMenu("Lighting", lightMenu);
		glutAddMenuEntry("Exit",16);
	glutAttachMenu(GLUT_RIGHT_BUTTON);

}

void menu1()
{
    glutCreateMenu(main_menu);
    glutAddMenuEntry("Start",100);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

}

int main(int arc,char **argv)
{
    glutInit(&arc,argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(750,500);
    glutInitWindowPosition(0,0);
    glutCreateWindow("RoadRoller");
    glutKeyboardFunc(keyboard);
    init();
    menu1();
    glutDisplayFunc(display);
    glutIdleFunc(idle);
    glutReshapeFunc(reshape);
    glutMainLoop();
    return 0;
}
